package replstore

import (
    "fmt"

    {{if eq .t "group"}}"github.com/gholt/store"{{end}}
)

type error{{.T}}Store string

func (es error{{.T}}Store) String() string {
    return string(es)
}

func (es error{{.T}}Store) Error() string {
    return string(es)
}

func (es error{{.T}}Store) Startup() error {
    return es
}

func (es error{{.T}}Store) Shutdown() error {
    return es
}

func (es error{{.T}}Store) EnableWrites() error {
    return es
}

func (es error{{.T}}Store) DisableWrites() error {
    return es
}

func (es error{{.T}}Store) Flush() error {
    return es
}

func (es error{{.T}}Store) AuditPass() error {
    return es
}

func (es error{{.T}}Store) Stats(debug bool) (fmt.Stringer, error) {
    return es, es
}

func (es error{{.T}}Store) ValueCap() (uint32, error) {
    return 0, es
}

func (es error{{.T}}Store) Lookup(keyA uint64, keyB uint64{{if eq .t "group"}}, childKeyA uint64, childKeyB uint64{{end}}) (int64, uint32, error) {
    return 0, 0, es
}

func (es error{{.T}}Store) Read(keyA uint64, keyB uint64{{if eq .t "group"}}, childKeyA uint64, childKeyB uint64{{end}}, value []byte) (int64, []byte, error) {
    return 0, value, es
}

func (es error{{.T}}Store) Write(keyA uint64, keyB uint64{{if eq .t "group"}}, childKeyA uint64, childKeyB uint64{{end}}, timestampMicro int64, value []byte) (int64, error) {
    return 0, es
}

func (es error{{.T}}Store) Delete(keyA uint64, keyB uint64{{if eq .t "group"}}, childKeyA uint64, childKeyB uint64{{end}}, timestampMicro int64) (int64, error) {
    return 0, es
}

{{if eq .t "group"}}
func (es errorGroupStore) LookupGroup(parentKeyA, parentKeyB uint64) ([]store.LookupGroupItem, error) {
    return nil, es
}

func (es errorGroupStore) ReadGroup(parentKeyA, parentKeyB uint64) ([]store.ReadGroupItem, error) {
    return nil, es
}
{{end}}
